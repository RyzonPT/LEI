#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('apilayer:server');
var http = require('http');
var axios = require('axios')

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3049');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);



var connectedSockets = {}
var s;
var io = require('socket.io').listen(server);

//var io = req.app.get('socketio');
  io.on('connection', function(socket){
    var idUtilizador = socket.handshake.query['idUtilizador'];

    connectedSockets[idUtilizador] = socket;
    console.log('User'+idUtilizador+' a user connected');


    socket.on('mensagem', function(data){
      /*
      var token =  jwt.sign({ sub: 'token gerado no TP DAW2019',nAcess:0},"daw2019",
      {
          expiresIn: 60,
          issuer:'Servidor Interface Web',
      })
      console.log('message: ' + JSON.stringify(data) );

      */

     console.log(data)
      axios.post('http://localhost:3051/api/mensagens',data)
        .then( () => { 
          connectedSockets[data.to].emit("mensagem", data)
        })
        .catch(erro =>{ console.log("ERRO: "+erro);data.erro ="Mensagem Não enviada, tente novamente mais tarde"; connectedSockets[data.from].emit("erro",data )})
    
      
    });

    socket.on('files', function(files){
      axios.post('http://localhost:3051/api/mensagens',data)
        .then( (idMensagem) => { 
          
          //axios.post()
          connectedSockets[data.to].emit("mensagem", data)
          
        })
        .catch(erro =>{ console.log("ERRO: "+erro);data.erro ="Mensagem Não enviada, tente novamente mais tarde"; connectedSockets[data.from].emit("erro",data )})
    })
    
    socket.on('disconnect', function(){
      console.log('user disconnected');
    });
  });

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  console.log('Servidor à escuta na porta ' + port + '...')
}
